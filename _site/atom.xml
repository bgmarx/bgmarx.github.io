<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ben Marx</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-09-05T22:43:30-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Using Dirty Schedulers with Rust</title>
   <link href="http://localhost:4000/2018/08/15/using-dirty-schedulers-with-rustler/"/>
   <updated>2018-08-15T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/08/15/using-dirty-schedulers-with-rustler</id>
   <content type="html">&lt;p&gt;In an earlier post, I showed how to get started using &lt;a href=&quot;/2018/08/01/getting-started-with-rustler/&quot;&gt;Rust NIFs with Rustler&lt;/a&gt;. We’ll continue using the same &lt;a href=&quot;http://github.com/bgmarx/nifty&quot;&gt;Nifty repo&lt;/a&gt;. In this post, we’ll be using the &lt;code class=&quot;highlighter-rouge&quot;&gt;dirty_schedulers&lt;/code&gt; branch. Recall that there are two types of dirty shedulers - CPU-bound and IO-bound. In Erlang, these are defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Rustler, they’re similarly delimited with an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; &lt;a href=&quot;https://github.com/hansihe/rustler/blob/b6578ea3999fd42f377c2497d8fae0bd629b927d/rustler/src/schedule.rs&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SchedulerFlags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DirtyCpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DirtyIo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the names are different, but the idea is the same. A “clean” NIF is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Normal&lt;/code&gt; NIF, and the dirty scheduler types are &lt;code class=&quot;highlighter-rouge&quot;&gt;DirtyCpu&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DirtyIo&lt;/code&gt;.  To use the dirty schedulers, bring the &lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerFlags&lt;/code&gt; module with &lt;code class=&quot;highlighter-rouge&quot;&gt;use rustler::schedule::SchedulerFlags&lt;/code&gt;. You can see this in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; in the Nifty repo. In &lt;a href=&quot;https://github.com/hansihe/rustler/blob/b6578ea3999fd42f377c2497d8fae0bd629b927d/rustler_tests/src/test_dirty.rs&quot;&gt;dirty_test.rs&lt;/a&gt;, there are two somewhat contrived tests that illustrate both types of dirty schedulers.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirty_cpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NifResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;atoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirty_io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NifResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;atoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of these tests do the same thing - they sleep for 100 milliseconds and return an &lt;code class=&quot;highlighter-rouge&quot;&gt;:ok&lt;/code&gt; atom. 100 milliseconds is 100 times the 1-millisecond Erlang scheduler preemptive threshold.&lt;/p&gt;

&lt;p&gt;I’ve yet to come up with a good Dirty IO example, but the Dirty CPU example listed above works well enough to get the dirty schedulers to do some work.&lt;/p&gt;

&lt;p&gt;There’s one thing more to do. Add the function - which we’re calling &lt;code class=&quot;highlighter-rouge&quot;&gt;timed_cpu&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;rustler_export_nifs!&lt;/code&gt; macro like so:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;rustler_export_nifs!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Elixir.Nifty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timed_cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SchedulerFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DirtyCpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The striking distinction is that you need to specify  &lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerFlags::DirtyCpu&lt;/code&gt;. For completeness, here’s the function:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_cpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NifResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;atoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It does the exact same thing as the Rustler test except that it sleeps for an entire second - an inordinate amount of time for a scheduler.  Now, in &lt;code class=&quot;highlighter-rouge&quot;&gt;nifty.ex&lt;/code&gt;, add the following functions:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:erlang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nif_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:nif_not_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn_dirty_cpu_and_receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_to_spawn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_to_spawn&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;spawn_link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timed_cpu/0&lt;/code&gt; functions in the same way as &lt;code class=&quot;highlighter-rouge&quot;&gt;add/2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sub/2&lt;/code&gt;. These functions are passed to the Rust crate and if for whatever reason they’re not found a &lt;code class=&quot;highlighter-rouge&quot;&gt;:nif_not_loaded&lt;/code&gt; Erlang error is returned. The &lt;code class=&quot;highlighter-rouge&quot;&gt;spawn_dirty_io_and_receive/1&lt;/code&gt; function spawns some number of processes, calls &lt;code class=&quot;highlighter-rouge&quot;&gt;timed_cpu/0&lt;/code&gt; and waits to receive the message as denoted by the pinned pid.&lt;/p&gt;

&lt;p&gt;The sole purpose of this function is to get the dotted lines representing the schedulers on the observer to move. Start the library with &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; and from the prompt run &lt;code class=&quot;highlighter-rouge&quot;&gt;iex(2)&amp;gt; Nifty.spawn_dirty_io(5)&lt;/code&gt;. This spawns five processes which should take a total of five seconds to return with a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;:ok&lt;/code&gt; atoms.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nifty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn_dirty_io_and_receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Load up the observer and let’s see if we can get the dirty schedulers to activate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/dirty-cpu-observer.png&quot; alt=&quot;drawing&quot; style=&quot;width:600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey, look at that. It worked. And it used two of the four schedulers.&lt;/p&gt;

&lt;p&gt;What’s interesting is that if you go back to &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; and change &lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerFlags::DirtyCpu&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerFlags::DirtyIo&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;spawn_dirty_cpu_and_receive/1&lt;/code&gt; again with the observer running, you’ll see that none of the dirty schedulers are activated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/dirty-io-observer.png&quot; alt=&quot;drawing&quot; style=&quot;width:600px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That makes sense and I’ll figure out a way to simulate dirty IO in a future post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dirty Schedulers</title>
   <link href="http://localhost:4000/2018/08/05/dirty-schedulers/"/>
   <updated>2018-08-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/08/05/dirty-schedulers</id>
   <content type="html">&lt;p&gt;Dirty schedulers officially arrived in OTP 21 and for me they’re one of the most exciting features to land in OTP 21. In this post, we’ll cover what dirty schedulers are, why they came about and how they make interoperability with NIFs safer and open to more applications.&lt;/p&gt;

&lt;h5 id=&quot;how-schedulers-work&quot;&gt;How Schedulers Work&lt;/h5&gt;

&lt;p&gt;To understand why dirty schedulers behave the way they do and their reason for existing, we first need to discuss how schedulers work on the BEAM.&lt;/p&gt;

&lt;h5 id=&quot;dirty-schedulers&quot;&gt;Dirty Schedulers&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Due to heroic efforts by Steve Vinoski, Rickard Green, and Sverker Eriksson, we have an (experimental) so-called dirty-scheduler (DS) NIF API in the Erlang runtime, which has been somewhat stable since release 17.3.”
 https://medium.com/@jlouis666/erlang-dirty-scheduler-overhead-6e1219dcc7&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting Started With Rustler</title>
   <link href="http://localhost:4000/2018/08/01/getting-started-with-rustler/"/>
   <updated>2018-08-01T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/08/01/getting-started-with-rustler</id>
   <content type="html">&lt;p&gt;Rust is an exciting new language that’s advertised “a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.” It excels in the same areas as C except that it has much more robust guarantees regarding memory and type safety.&lt;/p&gt;

&lt;p&gt;When one’s Erlang or Elixir program requires speed or number crunching - or both - NIFs (Native(ly) Implemented Functions) are the solution. NIFs are generally written in C  to take advantage of C’s speed. The tradeoff with NIFs written in C is that the whole BEAM can crash and won’t recover. This is why whenever a NIF is referenced, there’s usually a dire warning that a NIF crash will crash the whole VM. With Rust, because of its memory safety and static types, the chance of catastrophic failure is much lower.&lt;/p&gt;

&lt;p&gt;Here’s the repo to follow along with - &lt;a href=&quot;https://github.com/bgmarx/nifty&quot;&gt;nifty&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Getting started with Rustler is straightforward. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;rustler&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;  like any other dependency:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  defp deps do
    [
       ...snip...
      {:rustler, &quot;~&amp;gt; 0.18&quot;}
    ]
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, from the command line, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; and once the dependencies have been fetched, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix rustler.new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This command sets up both the Rust directory structure and also the interface between Elixir and the Rust NIF. You can follow the output below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/nifty&amp;gt; mix rustler.new
==&amp;gt; rustler
Compiling 2 files (.erl)
/usr/lib/erlang/lib/parsetools-2.1.2/include/yeccpre.hrl:60: Warning: erlang:get_stacktrace/0: deprecated; use the new try/catch syntax for retrieving the stack backtrace
Compiling 6 files (.ex)
Generated rustler app
==&amp;gt; nifty
This is the name of the Elixir module the NIF module will be registered to.
Module name &amp;gt; Nifty
This is the name used for the generated Rust crate. The default is most likely fine.
Library name (nifty) &amp;gt;
* creating native/nifty/README.md
* creating native/nifty/Cargo.toml
* creating native/nifty/src/lib.rs
Ready to go! See /niftynative/nifty/README.md for further instructions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generated README.md explains things clearly and succinctly. Let’s walk through it. The first thing required is to add the Rust compiler and the just-created crate in &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;. First, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def project do
    [
	...snip...
      compilers: [:rustler] ++ Mix.compilers,
      rustler_crates: rustler_crates(),
      ...snip...
    ]
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, create a new private function called &lt;code class=&quot;highlighter-rouge&quot;&gt;rustler_crates&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  defp rustler_crates do
    [nifty: [
      path: &quot;native/nifty&quot;,
      mode: (if Mix.env == :prod, do: :release, else: :debug),
    ]]
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the Rust tests alongside the Elixir tests when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix test&lt;/code&gt; add an alias:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  defp aliases do
    [
      &quot;test&quot;: [&quot;cmd cd native/nifty &amp;amp;&amp;amp; cargo test&quot;, &quot;test&quot;],
    ]
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, all that’s left to do get everything up and running is to &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; Rustler in the Elixir module and add error handling. For simplicity, the Rust function adds two numbers together.  The Elixir function &lt;code class=&quot;highlighter-rouge&quot;&gt;add/2&lt;/code&gt; raises an error if for whatever reason it can’t load the Rust crate.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule Nifty do
  use Rustler, otp_app: :nifty, crate: :nifty
  @moduledoc &quot;&quot;&quot;
  Documentation for Nifty.
  &quot;&quot;&quot;

  def add(_a, _b), do: :erlang.nif_error(:nif_not_loaded)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s turn to the Rust code which lives in &lt;code class=&quot;highlighter-rouge&quot;&gt;native/nifty/src/lib.rs&lt;/code&gt;.  First, let’s take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn add&amp;lt;'a&amp;gt;(env: Env&amp;lt;'a&amp;gt;, args: &amp;amp;[Term&amp;lt;'a&amp;gt;]) -&amp;gt; NifResult&amp;lt;Term&amp;lt;'a&amp;gt;&amp;gt; {
    let num1: i64 = try!(args[0].decode());
    let num2: i64 = try!(args[1].decode());

    Ok((atoms::ok(), num1 + num2).encode(env))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, the function takes two arguments, the &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; which is passed in by Rustler and a reference to some args and it returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;NifResult&lt;/code&gt;. The two inputs and the output all have the same lifetime as denoted by &lt;code class=&quot;highlighter-rouge&quot;&gt;'a&lt;/code&gt;. Lifetimes are the way by which Rust can guarantee memory safety. The compiler guarantees that all references are valid.&lt;/p&gt;

&lt;p&gt;The body of the function should be immediately readable, but it says to try to parse the arguments passed in and set them to be type &lt;code class=&quot;highlighter-rouge&quot;&gt;i64&lt;/code&gt;. Then the two integers are summed and returned as a two-tuple in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;{:ok, total}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, this should work. It’s verifiable by running &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; and then from the prompt run &lt;code class=&quot;highlighter-rouge&quot;&gt;Nifty.add(1,2)&lt;/code&gt;. It’ll return &lt;code class=&quot;highlighter-rouge&quot;&gt;{:ok 3}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens when you pass non-integers to the function. Let’s find out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex(3)&amp;gt; Nifty.add 1, :a
** (ArgumentError) argument error
    (nifty) Nifty.add(1, :a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty much what one would expect.&lt;/p&gt;

&lt;p&gt;To add more functions, create the function and then add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;rustler_export_nifs!&lt;/code&gt; macro like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rustler_export_nifs! {
    &quot;Elixir.Nifty&quot;,
    [(&quot;add&quot;, 2, add), (&quot;sub&quot;, 2, sub)],
    None
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, there’s a function added named &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; that takes two arguments and is called &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; in both Rust and Elixir.&lt;/p&gt;

&lt;p&gt;And that’s all there is to it to getting started with Rustler. In upcoming posts, I’ll focus on benchmarking, dirty schedulers and see if we can make Rust cause weird behavior on the BEAM.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elixir Meetup - Nerves Up and Running</title>
   <link href="http://localhost:4000/2015/11/12/Elixir-Meetup-Nerves-Up-and-Running/"/>
   <updated>2015-11-12T00:00:00-08:00</updated>
   <id>http://localhost:4000/2015/11/12/Elixir-Meetup-Nerves-Up-and-Running</id>
   <content type="html">&lt;h4 id=&quot;nerves-project&quot;&gt;Nerves Project&lt;/h4&gt;

&lt;p&gt;Here are the slides from the talk: &lt;a href=&quot;https://docs.google.com/presentation/d/1Y-NKlrvrhoM0ByVQiXTzBJwgCw6e3Z8xrMuzgxifiHg/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot;&gt;Nerves: Up and Running&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elixir Meetup - Elixir in Production</title>
   <link href="http://localhost:4000/2015/07/28/Elixir-Meetup-Talk/"/>
   <updated>2015-07-28T00:00:00-07:00</updated>
   <id>http://localhost:4000/2015/07/28/Elixir-Meetup-Talk</id>
   <content type="html">&lt;p&gt;I was fortunate enough to give a talk on Elixir in Production at the first Elixir meetup in San Francisco on July 15.&lt;/p&gt;

&lt;p&gt;Here are the slides from the talk: &lt;a href=&quot;https://t.co/PLVC6PRhWm&quot;&gt;Elixir in Production&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the first Elixir meetup in SF the turnout was great.  There was even a waitlist of 30 people.  It bodes well for the future of Elixir and the community in San Francisco.&lt;/p&gt;
</content>
 </entry>
 

</feed>
